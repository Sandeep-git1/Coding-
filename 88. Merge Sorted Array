You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, 
where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Code - 
1. LLETCODE code - 
              class Solution:
                  def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
                      """
                      Do not return anything, modify nums1 in-place instead.
                      """
                      p1 = m - 1  # Pointer for nums1
                      p2 = n - 1  # Pointer for nums2
                      p = m + n - 1  # Pointer for merged array
                      
                      while p2 >= 0 and p1 >= 0:        # Merge from the end to avoid overwriting
                          if nums1[p1] > nums2[p2]:
                              nums1[p] = nums1[p1]
                              p1 -= 1
                          else:
                              nums1[p] = nums2[p2]
                              p2 -= 1
                          p -= 1
                      while p2 >= 0:
                          nums1[p] = nums2[p2]
                          p2 -= 1
                          p -= 1

2. VS Code - 
                  # File: merge_sorted_array.py
                  # Description: Solution to LeetCode "Merge Sorted Array" problem with test cases
                  
                  from typing import List
                  
                  class Solution:
                      def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
                          """
                          Do not return anything, modify nums1 in-place instead.
                          """
                          p1 = m - 1  # Pointer for nums1
                          p2 = n - 1  # Pointer for nums2
                          p = m + n - 1  # Pointer for merged array
                          
                          # Merge from the end to avoid overwriting
                          while p2 >= 0 and p1 >= 0:
                              if nums1[p1] > nums2[p2]:
                                  nums1[p] = nums1[p1]
                                  p1 -= 1
                              else:
                                  nums1[p] = nums2[p2]
                                  p2 -= 1
                              p -= 1
                          
                          # If nums2 has remaining elements
                          while p2 >= 0:
                              nums1[p] = nums2[p2]
                              p2 -= 1
                              p -= 1
                  
                  # Test function to run the solution with test cases
                  def test_merge_sorted_array():
                      solution = Solution()
                      
                      # Test Case 1
                      nums1_1 = [1, 2, 3, 0, 0, 0]
                      m1 = 3
                      nums2_1 = [2, 5, 6]
                      n1 = 3
                      print("Test Case 1:")
                      print(f"Input: nums1 = {nums1_1[:m1] + [0]*n1}, m = {m1}, nums2 = {nums2_1}, n = {n1}")
                      solution.merge(nums1_1, m1, nums2_1, n1)
                      print(f"Output: {nums1_1}")
                      
                      # Test Case 2
                      nums1_2 = [1]
                      m2 = 1
                      nums2_2 = []
                      n2 = 0
                      print("\nTest Case 2:")
                      print(f"Input: nums1 = {nums1_2[:m2] + [0]*n2}, m = {m2}, nums2 = {nums2_2}, n = {n2}")
                      solution.merge(nums1_2, m2, nums2_2, n2)
                      print(f"Output: {nums1_2}")
                      
                      # Test Case 3
                      nums1_3 = [0]
                      m3 = 0
                      nums2_3 = [1]
                      n3 = 1
                      print("\nTest Case 3:")
                      print(f"Input: nums1 = {nums1_3[:m3] + [0]*n3}, m = {m3}, nums2 = {nums2_3}, n = {n3}")
                      solution.merge(nums1_3, m3, nums2_3, n3)
                      print(f"Output: {nums1_3}")
                  
                  # Run the tests
                  if __name__ == "__main__":
                      test_merge_sorted_array()
